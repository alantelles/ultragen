class Router
Router.appResponse = null

function init(name_prefix='', url_prefix='') : Router self
    # appResponseIsSet = assigned AppResponse    
    # if (!appResponseIsSet)
    #     raise("No AppResponse handler is set for this application", 'Router')
    # end

    self.defaultDecorator = null
    self.name_prefix = name_prefix
    self.url_prefix = Router.dropFirstAndLastSlash(url_prefix)
    self.routes = []
    self.customTypes = {null : [false, null]}
    routeModel = """{
        "path": '/some_path',
        "handler": SomeFunctionReference,
        "name": :identifier,
        "method": [some http verb]
    }"""
end

function HandlerFor404(params) : Router self
    live 'Page not found<br>'
end

function urlFor(name, params={}) : Router self
    for (self.routes, match)
        
        if (name == (match[:name]))
            
            matched = match[:path]
            matchedSplit = matched.split('/')
            len = matchedSplit.length()
            output = ['']
            queryStr = ''
            for (matchedSplit, part)
                
                partIsParam = (part[0]) == ':'
                
                if (partIsParam)
                    
                    paramName = part.slice(1, part.length())
                    dotPos = paramName.pos('.')
                    if (dotPos > 0)
                        paramName = paramName.slice(dotPos + 1)
                    end
                    
                    ins = params[paramName]
                    
                    params.drop(paramName)
                    output.append(str(ins))
                else
                    output.append(part)
                end
            end
            strOut = '/'.join(output)
            extraParams = params.keys()
            if ((extraParams.length()) > 0)
                queryStr = '?'
                queryList = []
                for (extraParams, extra)
                    queryList.append(extra + '=' + str(params[extra]))
                end
                queryStr += ('&'.join(queryList))
            end
            if (strOut == '')
                strOut = '/'
            end
            strPre = ''
            if ((self.url_prefix) != '')
                strPre = '/'
            end
            return strPre + (self.url_prefix) + strOut + queryStr
        end
    end
    raise("The given name '" + name + "' doesn't match any url in this router", 'Router')
end

function urlText(name) : Router self
    for (self.routes, match)        
        if (name == (match[:name]))            
            return match[:frontName]
        end
    end
    raise("The given name '" + name + "' doesn't match any url in this router", 'Router')
end


function dropFirstAndLastSlash(route) : Router
    if ((route.length()) > 0)
        f = route[0]
    else
        f = ''
    end
    
    len = route.length()
    if (f == '/')
        route = route.slice(1, len)
    end
    l = route.last()
    len = route.length()
    if ((l == '/') && (len > 0))
        route = route.slice(0, len - 1)
    end
    
    return route
end

function checkTypedInt(value) : Router
    if ((value.isInt()))
        return [true, int(value)]
    end
    return [false, null]
end

function checkTypedBool(value) : Router
    if (value == 'true')
        return [true, true]
    elsif (value == 'false')
        return [true, false]
    end
    return [false, null]
end

function checkTypedFloat(value) : Router
    if((value.isFloat()))
        return [true, float(value)]
    end
    return [false, null]
end

function checkTypedNum(value) : Router
    Router.checkTypedFloat(value).unpack(:valid, :conv)
    if (valid)
        return [valid, conv]
    end
    Router.checkTypedInt(value).unpack(:valid, :conv)
    if (valid)
        return [valid, conv]
    end
    return [false, null]
end

function checkCustomType(type, value) : Router self
    handler = self.customTypes[type]
    evaluated = handler(value)    
    if (typeof(evaluated) != NullType)
        return [true, evaluated]
    end
    return [false, null]
end

function checkTypedParam(type, value) : Router self
    opts = {
        'int': Router.checkTypedInt,
        'bool': Router.checkTypedBool,
        'float': Router.checkTypedFloat,
        'num': Router.checkTypedNum
    }
    checkHandler = opts.get(type)
    if (checkHandler)
        check = checkHandler(value)
    else
        check = self.checkCustomType(type, value)
    end
    return check
end

function getMatch(route=null, method=null) : Router self
    # if (!method)
    #     method = $request[:method]
    # end
    # if (!route)
    #     route = $request[:route]
    # end
    hasQueryString = route.pos("?")
    if (hasQueryString > -1)
        route = route.slice(0, hasQueryString)
    end
    route = Router.dropFirstAndLastSlash(route)
    params = {}
    routeSplit = route.split('/')
    lenRoute = routeSplit.length()
    for (self.routes, match)        
        routeMatch = true
        if(method == (match[:method]))
            
            candSplit = match[:path].split('/')
            lenCand = candSplit.length()
            
            if (lenCand == lenRoute)
                
                params = {}
                for (candSplit, part)
                    partIsParam = (part[0]) == ':'
                    if (part == (routeSplit[_part]))
                        
                    elsif (partIsParam)
                        paramName = part.slice(1, part.length())
                        dotPos = paramName.pos('.')
                        paramType = ''
                        paramValue = routeSplit[_part]
                        if (dotPos > 0)
                            paramType = paramName.slice(0, dotPos)
                            paramName = paramName.slice(dotPos + 1)
                            self.checkTypedParam(paramType, paramValue).unpack(:routeMatch, :paramValue)
                            
                            if (!routeMatch)
                                break
                            end

                            
                        end
                        params[paramName] = paramValue
                    else
                        
                        routeMatch = false
                        break
                    end
                end
            else
                routeMatch = false
                continue
            end
            if (routeMatch)
                                
                # decorated = match[:handler]
                # dec = match[:handler_decorator]
                match[:params] = params
                
                return match
            end
            
        end
    end
    return {:handler: self.HandlerFor404, :params: params, :handler_decorator: self.defaultDecorator}
end

function addRouter(router) : Router self
    for(router.routes, route)
        newRoute = {
            :path: (router.url_prefix) + '/' + (route[:path]),
            :name: (router.name_prefix) + '_' + (route[:name]),
            :handler: route[:handler],
            :method: route[:method],
            :handler_decorator: router.defaultDecorator
        }
        
        self.routes.append(newRoute)
    end
    for(router.customTypes.keys(), cust)
        # preName = (router.name_prefix + '_' + cust)
        self.customTypes[cust] = router.customTypes[cust]
    end
end

function addRoute(path, name, handler, method, frontName) : Router self
    frontName = str(frontName)
    if (frontName == 'null')
        frontName = name.capital()
    end
    self.routes.append({
        :path: Router.dropFirstAndLastSlash(path),
        :name: name,
        :handler: handler,
        :method: method,
        :params: {},
        :handler_decorator: self.defaultDecorator,
        :frontName: frontName
    })
end

# function getStatic(path, name) : Router self
#     self.get(path, name, function(params)
#         include @Core.Web.AppResponse
#         AppResponse.static($request[:route].slice(1))
#     end)
# end

function get(path, name, handler, frontName=null) : Router self
    self.addRoute(path, name, handler, 'GET', frontName)
end

function post(path, name, handler, frontName=null) : Router self
    self.addRoute(path, name, handler, 'POST', frontName)
end

function delete(path, name, handler, frontName=null) : Router self
    self.addRoute(path, name, handler, 'DELETE', frontName)
end

function patch(path, name, handler, frontName=null) : Router self
    self.addRoute(path, name, handler, 'PATCH', frontName)
end

function put(path, name, handler, frontName=null) : Router self
    self.addRoute(path, name, handler, 'PUT', frontName)
end