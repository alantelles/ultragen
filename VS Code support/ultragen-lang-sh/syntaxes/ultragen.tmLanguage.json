{
	"information_for_contributors": [
		"This file has been converted from https://github.com/textmate/ultragen.tmbundle/blob/master/Syntaxes/ultragen.plist",
		"If you want to provide a fix or improvement, please create a pull request against the original repository.",
		"Once accepted there, we are happy to receive an update request."
	],
	"version": "https://github.com/textmate/ultragen.tmbundle/commit/8d525dd4a0b77ae041593ff26dc883a694c648c5",
	"name": "ultragen",
	"scopeName": "source.ultragen",
	"comment": "\n\tTODO: unresolved issues\n\n\ttext:\n\t\"p <<end\n\tprint me!\n\tend\"\n\tsymptoms:\n\tnot recognized as a heredoc\n\tsolution:\n\tthere is no way to distinguish perfectly between the << operator and the start\n\tof a heredoc. Currently, we require assignment to recognize a heredoc. More\n\trefinement is possible.\n\t• Heredocs with indented terminators (<<-) are always distinguishable, however.\n\t• Nested heredocs are not really supportable at present\n\n\ttext:\n\tprint <<-'THERE' \n\tThis is single quoted. \n\tThe above used #{Time.now} \n\tTHERE \n\tsymtoms:\n\tFrom Programming ultragen p306; should be a non-interpolated heredoc.\n\t\n    text:\n    val?(a):p(b)\n    val?'a':'b'\n    symptoms:\n    ':p' is recognized as a symbol.. its 2 things ':' and 'p'.\n    :'b' has same problem.\n    solution:\n    ternary operator rule, precedence stuff, symbol rule.\n    but also consider 'a.b?(:c)' ??\n",
	"patterns": [
		{
			"captures": {
				"1": {
					"name": "keyword.control.class.ultragen"
				},
				"2": {
					"name": "entity.name.type.class.ultragen"
				},
				"3": {
					"name": "keyword.operator.other.ultragen"
				},
				"4": {
					"name": "entity.other.inherited-class.ultragen"
				},
				"5": {
					"name": "keyword.operator.other.ultragen"
				},
				"6": {
					"name": "variable.other.object.ultragen"
				}
			},
			"match": "^\\s*(class)\\s+(?:([.a-zA-Z0-9_:]+)(?:\\s*(<)\\s*([.a-zA-Z0-9_:]+))?|(<<)\\s*([.a-zA-Z0-9_:]+))",
			"name": "meta.class.ultragen"
		},
		{
			"captures": {
				"1": {
					"name": "keyword.control.module.ultragen"
				},
				"2": {
					"name": "entity.name.type.module.ultragen"
				},
				"3": {
					"name": "entity.other.inherited-class.module.first.ultragen"
				},
				"4": {
					"name": "punctuation.separator.inheritance.ultragen"
				},
				"5": {
					"name": "entity.other.inherited-class.module.second.ultragen"
				},
				"6": {
					"name": "punctuation.separator.inheritance.ultragen"
				},
				"7": {
					"name": "entity.other.inherited-class.module.third.ultragen"
				},
				"8": {
					"name": "punctuation.separator.inheritance.ultragen"
				}
			},
			"match": "^\\s*(module)\\s+(([A-Z]\\w*(::))?([A-Z]\\w*(::))?([A-Z]\\w*(::))*[A-Z]\\w*)",
			"name": "meta.module.ultragen"
		},
		{
			"comment": "else if is a common mistake carried over from other languages. it works if you put in a second end, but it’s never what you want.",
			"match": "(?<!\\.)\\belse(\\s)+if\\b",
			"name": "invalid.deprecated.ultragen"
		},
		{
			"captures": {
				"1": {
					"name": "punctuation.definition.constant.ultragen"
				}
			},
			"comment": "symbols as hash key (1.9 syntax)",
			"match": "(?>[a-zA-Z_]\\w*(?>[?!])?)(:)(?!:)",
			"name": "constant.other.symbol.hashkey.ultragen"
		},
		{
			"captures": {
				"1": {
					"name": "punctuation.definition.constant.ultragen"
				}
			},
			"comment": "symbols as hash key (1.8 syntax)",
			"match": "(?<!:)(:)(?>[a-zA-Z_]\\w*(?>[?!])?)(?=\\s*=>)",
			"name": "constant.other.symbol.hashkey.ultragen"
		},
		{
			"comment": "everything being a reserved word, not a value and needing a 'end' is a..",
			"match": "(?<!\\.)\\b(if|else|elsif|end|for|while|decorator|function)\\b(?![?!])",
			"name": "keyword.control.ultragen"
		},
		{
			"comment": "contextual smart pair support for block parameters",
			"match": "(?<!\\.)\\bdo\\b",
			"name": "keyword.control.start-block.ultragen"
		},
		{
			"comment": "contextual smart pair support",
			"match": "(?<=\\{)(\\s+)",
			"name": "meta.syntax.ultragen.start-block"
		},
		{
			"match": "(?<!\\.)\\b(continue|break|return)(\\b|(?<=[?]))(?![?!])",
			"name": "keyword.control.pseudo-method.ultragen"
		},
		{
			"match": "\\b(null|true|false)\\b(?![?!])",
			"name": "constant.language.ultragen"
		},
		{
			"match": "\\b(__(LIVE)__)\\b(?![?!])",
			"name": "variable.language.ultragen"
		},
		{
			"begin": "^__END__\\n",
			"captures": {
				"0": {
					"name": "string.unquoted.program-block.ultragen"
				}
			},
			"comment": "__END__ marker",
			"contentName": "text.plain",
			"end": "(?=not)impossible",
			"patterns": [
				{
					"begin": "(?=<?xml|<(?i:html\\b)|!DOCTYPE (?i:html\\b))",
					"end": "(?=not)impossible",
					"name": "text.html.embedded.ultragen",
					"patterns": [
						{
							"include": "text.html.basic"
						}
					]
				}
			]
		},
		{
			"match": "\\b(self)\\b(?![?!])",
			"name": "variable.language.self.ultragen"
		},
		{
			"comment": " everything being a method but having a special function is a..",
			"match": "\\b(new|raise)\\b(?![?!])",
			"name": "keyword.other.special-method.ultragen"
		},
		{
			"begin": "\\b(?<!\\.)(include)\\b",
			"captures": {
				"1": {
					"name": "keyword.other.special-method.ultragen"
				}
			},
			"end": "$|(?=#|\\})",
			"name": "meta.require.ultragen",
			"patterns": [
				{
					"include": "$self"
				}
			]
		},		
		{
			"captures": {
				"1": {
					"name": "punctuation.definition.variable.ultragen"
				}
			},
			"match": "(\\$)[a-zA-Z_]+[a-zA-Z_0-9]*\\w*",
			"name": "variable.other.constant.ultragen"
		},
		{
			"match": "\\b[A-Z]\\w*(?=((\\.|::)[A-Za-z]|\\[))",
			"name": "support.class.ultragen"
		},
		{
			"match": "\\b(print|inline|live|lambda|load)(\\b|(?<=[?!]))(?![?!])",
			"name": "support.function.kernel.ultragen"
		},
		{
			"begin": "(?x)\n\t\t\t         (?=function\\b)                                                      # an optimization to help Oniguruma fail fast\n\t\t\t         (?<=^|\\s)(function)\\s+                                              # the def keyword\n\t\t\t         ( (?>[a-zA-Z_]\\w*(?>\\.|::))?                                   # a method name prefix\n\t\t\t           (?>[a-zA-Z_]\\w*(?>[?!]|=(?!>))?                              # the method name\n\t\t\t           |===?|!=|!~|>[>=]?|<=>|<[<=]?|[%&`/\\|^]|\\*\\*?|=?~|[-+]@?|\\[\\]=?) )  # …or an operator method\n\t\t\t         \\s*(\\()                                                        # the openning parenthesis for arguments\n\t\t\t        ",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.def.ultragen"
				},
				"2": {
					"name": "entity.name.function.ultragen"
				},
				"3": {
					"name": "punctuation.definition.parameters.ultragen"
				}
			},
			"comment": "the method pattern comes from the symbol pattern, see there for a explaination",
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.parameters.ultragen"
				}
			},
			"name": "meta.function.method.with-arguments.ultragen",
			"patterns": [
				{
					"begin": "(?=[&*_a-zA-Z])",
					"end": "(?=[,)])",
					"patterns": [
						{
							"captures": {
								"1": {
									"name": "storage.type.variable.ultragen"
								},
								"2": {
									"name": "constant.other.symbol.hashkey.parameter.function.ultragen"
								},
								"3": {
									"name": "punctuation.definition.constant.ultragen"
								},
								"4": {
									"name": "variable.parameter.function.ultragen"
								}
							},
							"match": "\\G([&*]?)(?:([_a-zA-Z]\\w*(:))|([_a-zA-Z]\\w*))"
						},
						{
							"include": "#parens"
						},
						{
							"include": "#braces"
						},
						{
							"include": "$self"
						}
					]
				}
			],
			"repository": {
				"braces": {
					"begin": "\\{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.function.begin.ultragen"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.function.end.ultragen"
						}
					},
					"patterns": [
						{
							"include": "#parens"
						},
						{
							"include": "#braces"
						},
						{
							"include": "$self"
						}
					]
				},
				"parens": {
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.function.begin.ultragen"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.function.end.ultragen"
						}
					},
					"patterns": [
						{
							"include": "#parens"
						},
						{
							"include": "#braces"
						},
						{
							"include": "$self"
						}
					]
				}
			}
		},
		{
			"begin": "(?x)\n\t\t\t         (?=function\\b)                                                      # an optimization to help Oniguruma fail fast\n\t\t\t         (?<=^|\\s)(function)\\s+                                              # the def keyword\n\t\t\t         ( (?>[a-zA-Z_]\\w*(?>\\.|::))?                                   # a method name prefix\n\t\t\t           (?>[a-zA-Z_]\\w*(?>[?!]|=(?!>))?                              # the method name\n\t\t\t           |===?|!=|!~|>[>=]?|<=>|<[<=]?|[%&`/\\|^]|\\*\\*?|=?~|[-+]@?|\\[\\]=?) )  # …or an operator method\n\t\t\t         [ \\t]                                                          # the space separating the arguments\n\t\t\t         (?=[ \\t]*[^\\s#;])                                              # make sure arguments and not a comment follow\n\t\t\t        ",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.def.ultragen"
				},
				"2": {
					"name": "entity.name.function.ultragen"
				}
			},
			"comment": "same as the previous rule, but without parentheses around the arguments",
			"end": "$",
			"name": "meta.function.method.with-arguments.ultragen",
			"patterns": [
				{
					"begin": "(?![\\s,])",
					"end": "(?=,|$)",
					"patterns": [
						{
							"captures": {
								"1": {
									"name": "storage.type.variable.ultragen"
								},
								"2": {
									"name": "constant.other.symbol.hashkey.parameter.function.ultragen"
								},
								"3": {
									"name": "punctuation.definition.constant.ultragen"
								},
								"4": {
									"name": "variable.parameter.function.ultragen"
								}
							},
							"match": "\\G([&*]?)(?:([_a-zA-Z]\\w*(:))|([_a-zA-Z]\\w*))",
							"name": "variable.parameter.function.ultragen"
						},
						{
							"include": "$self"
						}
					]
				}
			]
		},
		{
			"captures": {
				"1": {
					"name": "keyword.control.def.ultragen"
				},
				"3": {
					"name": "entity.name.function.ultragen"
				}
			},
			"comment": " the optional name is just to catch the def also without a method-name",
			"match": "(?x)\n\t\t\t         (?=def\\b)                                                           # an optimization to help Oniguruma fail fast\n\t\t\t         (?<=^|\\s)(def)\\b                                                    # the def keyword\n\t\t\t         ( \\s+                                                               # an optional group of whitespace followed by…\n\t\t\t           ( (?>[a-zA-Z_]\\w*(?>\\.|::))?                                      # a method name prefix\n\t\t\t             (?>[a-zA-Z_]\\w*(?>[?!]|=(?!>))?                                 # the method name\n\t\t\t             |===?|!=|!~|>[>=]?|<=>|<[<=]?|[%&`/\\|^]|\\*\\*?|=?~|[-+]@?|\\[\\]=?) ) )?  # …or an operator method\n\t\t\t        ",
			"name": "meta.function.method.without-arguments.ultragen"
		},
		{
			"match": "\\b\\d(?>_?\\d)*(?=\\.\\d|[eE])(\\.\\d(?>_?\\d)*)?([eE][-+]?\\d(?>_?\\d)*)?r?i?\\b",
			"name": "constant.numeric.float.ultragen"
		},
		{
			"match": "\\b(0|(0[dD]\\d|[1-9])(?>_?\\d)*)r?i?\\b",
			"name": "constant.numeric.integer.ultragen"
		},
		{
			"match": "\\b0[xX]\\h(?>_?\\h)*r?i?\\b",
			"name": "constant.numeric.hex.ultragen"
		},
		{
			"match": "\\b0[bB][01](?>_?[01])*r?i?\\b",
			"name": "constant.numeric.binary.ultragen"
		},
		{
			"match": "\\b0([oO]?[0-7](?>_?[0-7])*)?r?i?\\b",
			"name": "constant.numeric.octal.ultragen"
		},
		{
			"begin": ":'",
			"captures": {
				"0": {
					"name": "punctuation.definition.constant.ultragen"
				}
			},
			"end": "'",
			"name": "constant.other.symbol.single-quoted.ultragen",
			"patterns": [
				{
					"match": "\\\\['\\\\]",
					"name": "constant.character.escape.ultragen"
				}
			]
		},
		{
			"begin": ":\"",
			"captures": {
				"0": {
					"name": "punctuation.definition.constant.ultragen"
				}
			},
			"end": "\"",
			"name": "constant.other.symbol.double-quoted.ultragen",
			"patterns": [
				{
					"include": "#interpolated_ultragen"
				},
				{
					"include": "#escaped_char"
				}
			]
		},
		{
			"comment": "Needs higher precidence than regular expressions.",
			"match": "(?<!\\()/=",
			"name": "keyword.operator.assignment.augmented.ultragen"
		},
		{
			"begin": "'",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.ultragen"
				}
			},
			"comment": "single quoted string (does not allow interpolation)",
			"end": "'",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.ultragen"
				}
			},
			"name": "string.quoted.single.ultragen",
			"patterns": [
				{
					"match": "\\\\'|\\\\\\\\",
					"name": "constant.character.escape.ultragen"
				}
			]
		},
		{
			"begin": "\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.ultragen"
				}
			},
			"comment": "double quoted string (allows for interpolation)",
			"end": "\"",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.ultragen"
				}
			},
			"name": "string.quoted.double.ultragen",
			"patterns": [
				{
					"include": "#escaped_char"
				}
			]
		},
		{
			"begin": "\"\"\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.ultragen"
				}
			},
			"comment": "execute string (allows for interpolation)",
			"end": "\"\"\"",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.ultragen"
				}
			},
			"name": "string.interpolated.ultragen",
			"patterns": [
				{
					"include": "#interpolated_ultragen"
				},
				{
					"include": "#escaped_char"
				}
			]
		},
		{
			"include": "#percent_literals"
		},
		{
			"begin": "(?x)\n\t\t\t   (?:\n\t\t\t     ^                      # beginning of line\n\t\t\t   | (?<=                   # or look-behind on:\n\t\t\t       [=>~(?:\\[,|&;]\n\t\t\t     | [\\s;]if\\s\t\t\t# keywords\n\t\t\t     | [\\s;]elsif\\s\n\t\t\t     | [\\s;]while\\s\n\t\t\t     | [\\s;]unless\\s\n\t\t\t     | [\\s;]when\\s\n\t\t\t     | [\\s;]assert_match\\s\n\t\t\t     | [\\s;]or\\s\t\t\t# boolean opperators\n\t\t\t     | [\\s;]and\\s\n\t\t\t     | [\\s;]not\\s\n\t\t\t     | [\\s.]index\\s\t\t\t# methods\n\t\t\t     | [\\s.]scan\\s\n\t\t\t     | [\\s.]sub\\s\n\t\t\t     | [\\s.]sub!\\s\n\t\t\t     | [\\s.]gsub\\s\n\t\t\t     | [\\s.]gsub!\\s\n\t\t\t     | [\\s.]match\\s\n\t\t\t     )\n\t\t\t   | (?<=                  # or a look-behind with line anchor:\n\t\t\t        ^when\\s            # duplication necessary due to limits of regex\n\t\t\t      | ^if\\s\n\t\t\t      | ^elsif\\s\n\t\t\t      | ^while\\s\n\t\t\t      | ^unless\\s\n\t\t\t      )\n\t\t\t   )\n\t\t\t   \\s*((/))(?![*+{}?])\n\t\t\t",
			"captures": {
				"1": {
					"name": "string.regexp.classic.ultragen"
				},
				"2": {
					"name": "punctuation.definition.string.ultragen"
				}
			},
			"comment": "regular expressions (normal)\n\t\t\twe only start a regexp if the character before it (excluding whitespace)\n\t\t\tis what we think is before a regexp\n\t\t\t",
			"contentName": "string.regexp.classic.ultragen",
			"end": "((/[eimnosux]*))",
			"patterns": [
				{
					"include": "#regex_sub"
				}
			]
		},
		{
			"captures": {
				"1": {
					"name": "punctuation.definition.constant.ultragen"
				}
			},
			"comment": "symbols",
			"match": "(?<!:)(:)(?>[a-zA-Z_]\\w*(?>[?!]|=(?![>=]))?|===?|>[>=]?|<=>|<[<=]?|[%&`/\\|]|\\*\\*?|=?~|[-+]@?|\\[\\]=?|(@@?|\\$)[a-zA-Z_]\\w*)",
			"name": "constant.other.symbol.ultragen"
		},
		{
			"begin": "\\s*###\\s*\\n",
			"captures": {
				"0": {
					"name": "punctuation.definition.comment.ultragen"
				}
			},
			"comment": "multiline comments",
			"end": "\\s*###!",
			"name": "comment.block.documentation.ultragen"
		},
		{
			"begin": "(^[ \\t]+)?(?=#)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.whitespace.comment.leading.ultragen"
				}
			},
			"end": "(?!\\G)",
			"patterns": [
				{
					"begin": "#",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.ultragen"
						}
					},
					"end": "\\n",
					"name": "comment.line.number-sign.ultragen"
				}
			]
		},
		{
			"comment": "\n\t\t\tmatches questionmark-letters.\n\n\t\t\texamples (1st alternation = hex):\n\t\t\t?\\x1     ?\\x61\n\n\t\t\texamples (2nd alternation = octal):\n\t\t\t?\\0      ?\\07     ?\\017\n\n\t\t\texamples (3rd alternation = escaped):\n\t\t\t?\\n      ?\\b\n\n\t\t\texamples (4th alternation = meta-ctrl):\n\t\t\t?\\C-a    ?\\M-a    ?\\C-\\M-\\C-\\M-a\n\n\t\t\texamples (4th alternation = normal):\n\t\t\t?a       ?A       ?0 \n\t\t\t?*       ?\"       ?( \n\t\t\t?.       ?#\n\t\t\t\n\t\t\t\n\t\t\tthe negative lookbehind prevents against matching\n\t\t\tp(42.tainted?)\n\t\t\t",
			"match": "(?<!\\w)\\?(\\\\(x\\h{1,2}(?!\\h)\\b|0[0-7]{0,2}(?![0-7])\\b|[^x0MC])|(\\\\[MC]-)+\\w|[^\\s\\\\])",
			"name": "constant.numeric.ultragen"
		},
		{
			"begin": "(?=(?><<[-~](\"?)((?:[_\\w]+_|)HTML)\\b\\1))",
			"comment": "Heredoc with embedded html",
			"end": "(?!\\G)",
			"name": "meta.embedded.block.html",
			"patterns": [
				{
					"begin": "(?><<[-~](\"?)((?:[_\\w]+_|)HTML)\\b\\1)",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.ultragen"
						}
					},
					"contentName": "text.html",
					"end": "\\s*\\2$\\n?",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.ultragen"
						}
					},
					"name": "string.unquoted.heredoc.ultragen",
					"patterns": [
						{
							"include": "#heredoc"
						},
						{
							"include": "#interpolated_ultragen"
						},
						{
							"include": "text.html.basic"
						},
						{
							"include": "#escaped_char"
						}
					]
				}
			]
		},
		{
			"begin": "(?=(?><<[-~](\"?)((?:[_\\w]+_|)XML)\\b\\1))",
			"comment": "Heredoc with embedded xml",
			"end": "(?!\\G)",
			"name": "meta.embedded.block.xml",
			"patterns": [
				{
					"begin": "(?><<[-~](\"?)((?:[_\\w]+_|)XML)\\b\\1)",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.ultragen"
						}
					},
					"contentName": "text.xml",
					"end": "\\s*\\2$\\n?",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.ultragen"
						}
					},
					"name": "string.unquoted.heredoc.ultragen",
					"patterns": [
						{
							"include": "#heredoc"
						},
						{
							"include": "#interpolated_ultragen"
						},
						{
							"include": "text.xml"
						},
						{
							"include": "#escaped_char"
						}
					]
				}
			]
		},
		{
			"begin": "(?=(?><<[-~](\"?)((?:[_\\w]+_|)SQL)\\b\\1))",
			"comment": "Heredoc with embedded sql",
			"end": "(?!\\G)",
			"name": "meta.embedded.block.sql",
			"patterns": [
				{
					"begin": "(?><<[-~](\"?)((?:[_\\w]+_|)SQL)\\b\\1)",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.ultragen"
						}
					},
					"contentName": "source.sql",
					"end": "\\s*\\2$\\n?",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.ultragen"
						}
					},
					"name": "string.unquoted.heredoc.ultragen",
					"patterns": [
						{
							"include": "#heredoc"
						},
						{
							"include": "#interpolated_ultragen"
						},
						{
							"include": "source.sql"
						},
						{
							"include": "#escaped_char"
						}
					]
				}
			]
		},
		{
			"begin": "(?=(?><<[-~](\"?)((?:[_\\w]+_|)CSS)\\b\\1))",
			"comment": "Heredoc with embedded css",
			"end": "(?!\\G)",
			"name": "meta.embedded.block.css",
			"patterns": [
				{
					"begin": "(?><<[-~](\"?)((?:[_\\w]+_|)CSS)\\b\\1)",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.ultragen"
						}
					},
					"contentName": "source.css",
					"end": "\\s*\\2$\\n?",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.ultragen"
						}
					},
					"name": "string.unquoted.heredoc.ultragen",
					"patterns": [
						{
							"include": "#heredoc"
						},
						{
							"include": "#interpolated_ultragen"
						},
						{
							"include": "source.css"
						},
						{
							"include": "#escaped_char"
						}
					]
				}
			]
		},
		{
			"begin": "(?=(?><<[-~](\"?)((?:[_\\w]+_|)CPP)\\b\\1))",
			"comment": "Heredoc with embedded c++",
			"end": "(?!\\G)",
			"name": "meta.embedded.block.c++",
			"patterns": [
				{
					"begin": "(?><<[-~](\"?)((?:[_\\w]+_|)CPP)\\b\\1)",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.ultragen"
						}
					},
					"contentName": "source.c++",
					"end": "\\s*\\2$\\n?",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.ultragen"
						}
					},
					"name": "string.unquoted.heredoc.ultragen",
					"patterns": [
						{
							"include": "#heredoc"
						},
						{
							"include": "#interpolated_ultragen"
						},
						{
							"include": "source.c++"
						},
						{
							"include": "#escaped_char"
						}
					]
				}
			]
		},
		{
			"begin": "(?=(?><<[-~](\"?)((?:[_\\w]+_|)C)\\b\\1))",
			"comment": "Heredoc with embedded c",
			"end": "(?!\\G)",
			"name": "meta.embedded.block.c",
			"patterns": [
				{
					"begin": "(?><<[-~](\"?)((?:[_\\w]+_|)C)\\b\\1)",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.ultragen"
						}
					},
					"contentName": "source.c",
					"end": "\\s*\\2$\\n?",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.ultragen"
						}
					},
					"name": "string.unquoted.heredoc.ultragen",
					"patterns": [
						{
							"include": "#heredoc"
						},
						{
							"include": "#interpolated_ultragen"
						},
						{
							"include": "source.c"
						},
						{
							"include": "#escaped_char"
						}
					]
				}
			]
		},
		{
			"begin": "(?=(?><<[-~](\"?)((?:[_\\w]+_|)(?:JS|JAVASCRIPT))\\b\\1))",
			"comment": "Heredoc with embedded javascript",
			"end": "(?!\\G)",
			"name": "meta.embedded.block.js",
			"patterns": [
				{
					"begin": "(?><<[-~](\"?)((?:[_\\w]+_|)(?:JS|JAVASCRIPT))\\b\\1)",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.ultragen"
						}
					},
					"contentName": "source.js",
					"end": "\\s*\\2$\\n?",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.ultragen"
						}
					},
					"name": "string.unquoted.heredoc.ultragen",
					"patterns": [
						{
							"include": "#heredoc"
						},
						{
							"include": "#interpolated_ultragen"
						},
						{
							"include": "source.js"
						},
						{
							"include": "#escaped_char"
						}
					]
				}
			]
		},
		{
			"begin": "(?=(?><<[-~](\"?)((?:[_\\w]+_|)JQUERY)\\b\\1))",
			"comment": "Heredoc with embedded jQuery javascript",
			"end": "(?!\\G)",
			"name": "meta.embedded.block.js.jquery",
			"patterns": [
				{
					"begin": "(?><<[-~](\"?)((?:[_\\w]+_|)JQUERY)\\b\\1)",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.ultragen"
						}
					},
					"contentName": "source.js.jquery",
					"end": "\\s*\\2$\\n?",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.ultragen"
						}
					},
					"name": "string.unquoted.heredoc.ultragen",
					"patterns": [
						{
							"include": "#heredoc"
						},
						{
							"include": "#interpolated_ultragen"
						},
						{
							"include": "source.js.jquery"
						},
						{
							"include": "#escaped_char"
						}
					]
				}
			]
		},
		{
			"begin": "(?=(?><<[-~](\"?)((?:[_\\w]+_|)(?:SH|SHELL))\\b\\1))",
			"comment": "Heredoc with embedded shell",
			"end": "(?!\\G)",
			"name": "meta.embedded.block.shell",
			"patterns": [
				{
					"begin": "(?><<[-~](\"?)((?:[_\\w]+_|)(?:SH|SHELL))\\b\\1)",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.ultragen"
						}
					},
					"contentName": "source.shell",
					"end": "\\s*\\2$\\n?",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.ultragen"
						}
					},
					"name": "string.unquoted.heredoc.ultragen",
					"patterns": [
						{
							"include": "#heredoc"
						},
						{
							"include": "#interpolated_ultragen"
						},
						{
							"include": "source.shell"
						},
						{
							"include": "#escaped_char"
						}
					]
				}
			]
		},
		{
			"begin": "(?=(?><<[-~](\"?)((?:[_\\w]+_|)LUA)\\b\\1))",
			"comment": "Heredoc with embedded lua",
			"end": "(?!\\G)",
			"name": "meta.embedded.block.lua",
			"patterns": [
				{
					"begin": "(?><<[-~](\"?)((?:[_\\w]+_|)LUA)\\b\\1)",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.ultragen"
						}
					},
					"contentName": "source.lua",
					"end": "\\s*\\2$\\n?",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.ultragen"
						}
					},
					"name": "string.unquoted.heredoc.ultragen",
					"patterns": [
						{
							"include": "#heredoc"
						},
						{
							"include": "#interpolated_ultragen"
						},
						{
							"include": "source.lua"
						},
						{
							"include": "#escaped_char"
						}
					]
				}
			]
		},
		{
			"begin": "(?=(?><<[-~](\"?)((?:[_\\w]+_|)ultragen)\\b\\1))",
			"comment": "Heredoc with embedded ultragen",
			"end": "(?!\\G)",
			"name": "meta.embedded.block.ultragen",
			"patterns": [
				{
					"begin": "(?><<[-~](\"?)((?:[_\\w]+_|)ultragen)\\b\\1)",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.ultragen"
						}
					},
					"contentName": "source.ultragen",
					"end": "\\s*\\2$\\n?",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.ultragen"
						}
					},
					"name": "string.unquoted.heredoc.ultragen",
					"patterns": [
						{
							"include": "#heredoc"
						},
						{
							"include": "#interpolated_ultragen"
						},
						{
							"include": "source.ultragen"
						},
						{
							"include": "#escaped_char"
						}
					]
				}
			]
		},
		{
			"begin": "(?>=\\s*<<(\\w+))",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.ultragen"
				}
			},
			"end": "^\\1$",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.ultragen"
				}
			},
			"name": "string.unquoted.heredoc.ultragen",
			"patterns": [
				{
					"include": "#heredoc"
				},
				{
					"include": "#interpolated_ultragen"
				},
				{
					"include": "#escaped_char"
				}
			]
		},
		{
			"begin": "(?><<[-~](\\w+))",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.ultragen"
				}
			},
			"comment": "heredoc with indented terminator",
			"end": "\\s*\\1$",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.ultragen"
				}
			},
			"name": "string.unquoted.heredoc.ultragen",
			"patterns": [
				{
					"include": "#heredoc"
				},
				{
					"include": "#interpolated_ultragen"
				},
				{
					"include": "#escaped_char"
				}
			]
		},
		{
			"match": ":",
			"name": "punctuation.separator.key-value"
		},
		{
			"match": "->",
			"name": "support.function.kernel.lambda.ultragen"
		},
		{
			"match": "\\*=|\\*=|\\+=|-=|\\/=|\\|{1,2}=",
			"name": "keyword.operator.assignment.augmented.ultragen"
		},
		{
			"match": "<(?!<|=)|>(?!<|=|>)|<=|>=|==|!=|!~|(?<=[ \\t])\\?",
			"name": "keyword.operator.comparison.ultragen"
		},
		{
			"match": "(?<!\\.)\\b(and|not|or)\\b(?![?!])",
			"name": "keyword.operator.logical.ultragen"
		},
		{
			"comment": "Make sure this goes after assignment and comparison",
			"match": "(?<=^|[ \\t])!|&&|\\|\\||\\^",
			"name": "keyword.operator.logical.ultragen"
		},
		{
			"captures": {
				"1": {
					"name": "punctuation.separator.method.ultragen"
				}
			},
			"comment": "Safe navigation operator - Added in 2.3",
			"match": "(&\\.)\\s*(?![A-Z])"
		},
		{
			"match": "(%|&|\\*\\*|\\*|\\+|-|/)",
			"name": "keyword.operator.arithmetic.ultragen"
		},
		{
			"match": "=",
			"name": "keyword.operator.assignment.ultragen"
		},
		{
			"match": "\\||~|>>",
			"name": "keyword.operator.other.ultragen"
		},
		{
			"match": ";",
			"name": "punctuation.separator.statement.ultragen"
		},
		{
			"match": ",",
			"name": "punctuation.separator.object.ultragen"
		},
		{
			"captures": {
				"1": {
					"name": "punctuation.separator.namespace.ultragen"
				}
			},
			"comment": "Mark as namespace separator if double colons followed by capital letter",
			"match": "(::)\\s*(?=[A-Z])"
		},
		{
			"captures": {
				"1": {
					"name": "punctuation.separator.method.ultragen"
				}
			},
			"comment": "Mark as method separator if double colons not followed by capital letter",
			"match": "(\\.|::)\\s*(?![A-Z])"
		},
		{
			"comment": "Must come after method and constant separators to prefer double colons",
			"match": ":",
			"name": "punctuation.separator.other.ultragen"
		},
		{
			"match": "\\{",
			"name": "punctuation.section.scope.begin.ultragen"
		},
		{
			"match": "\\}",
			"name": "punctuation.section.scope.end.ultragen"
		},
		{
			"match": "\\[",
			"name": "punctuation.section.array.begin.ultragen"
		},
		{
			"match": "\\]",
			"name": "punctuation.section.array.end.ultragen"
		},
		{
			"match": "\\(|\\)",
			"name": "punctuation.section.function.ultragen"
		}
	],
	"repository": {
		"escaped_char": {
			"match": "\\\\(?:[0-7]{1,3}|x[\\da-fA-F]{1,2}|.)",
			"name": "constant.character.escape.ultragen"
		},
		"heredoc": {
			"begin": "^<<[-~]?\\w+",
			"end": "$",
			"patterns": [
				{
					"include": "$self"
				}
			]
		},
		"interpolated_ultragen": {
			"patterns": [
				{
					"begin": "\\{\\{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.embedded.begin.ultragen"
						}
					},
					"contentName": "source.ultragen",
					"end": "(\\}\\})",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.embedded.end.ultragen"
						},
						"1": {
							"name": "source.ultragen"
						}
					},
					"name": "meta.embedded.line.ultragen",
					"patterns": [
						{
							"include": "#nest_curly_and_self"
						},
						{
							"include": "$self"
						}
					],
					"repository": {
						"nest_curly_and_self": {
							"patterns": [
								{
									"begin": "\\{",
									"captures": {
										"0": {
											"name": "punctuation.section.scope.ultragen"
										}
									},
									"end": "\\}",
									"patterns": [
										{
											"include": "#nest_curly_and_self"
										}
									]
								},
								{
									"include": "$self"
								}
							]
						}
					}
				},
				{
					"captures": {
						"1": {
							"name": "punctuation.definition.variable.ultragen"
						}
					},
					"match": "(#@)[a-zA-Z_]\\w*",
					"name": "variable.other.readwrite.instance.ultragen"
				},
				{
					"captures": {
						"1": {
							"name": "punctuation.definition.variable.ultragen"
						}
					},
					"match": "(#@@)[a-zA-Z_]\\w*",
					"name": "variable.other.readwrite.class.ultragen"
				},
				{
					"captures": {
						"1": {
							"name": "punctuation.definition.variable.ultragen"
						}
					},
					"match": "(#\\$)[a-zA-Z_]\\w*",
					"name": "variable.other.readwrite.global.ultragen"
				}
			]
		},
		"percent_literals": {
			"patterns": [
				{
					"begin": "%i(?:([(\\[{<])|([^\\w\\s]|_))",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.array.begin.ultragen"
						}
					},
					"end": "[)\\]}>]\\2|\\1\\2",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.array.end.ultragen"
						}
					},
					"name": "meta.array.symbol.ultragen",
					"patterns": [
						{
							"begin": "\\G(?<=\\()(?!\\))",
							"end": "(?=\\))",
							"patterns": [
								{
									"include": "#parens"
								},
								{
									"include": "#symbol"
								}
							]
						},
						{
							"begin": "\\G(?<=\\[)(?!\\])",
							"end": "(?=\\])",
							"patterns": [
								{
									"include": "#brackets"
								},
								{
									"include": "#symbol"
								}
							]
						},
						{
							"begin": "\\G(?<=\\{)(?!\\})",
							"end": "(?=\\})",
							"patterns": [
								{
									"include": "#braces"
								},
								{
									"include": "#symbol"
								}
							]
						},
						{
							"begin": "\\G(?<=<)(?!>)",
							"end": "(?=>)",
							"patterns": [
								{
									"include": "#angles"
								},
								{
									"include": "#symbol"
								}
							]
						},
						{
							"include": "#symbol"
						}
					],
					"repository": {
						"angles": {
							"patterns": [
								{
									"captures": {
										"0": {
											"name": "constant.character.escape.ultragen"
										}
									},
									"match": "\\\\<|\\\\>",
									"name": "constant.other.symbol.ultragen"
								},
								{
									"begin": "<",
									"captures": {
										"0": {
											"name": "constant.other.symbol.ultragen"
										}
									},
									"end": ">",
									"patterns": [
										{
											"include": "#angles"
										},
										{
											"include": "#symbol"
										}
									]
								}
							]
						},
						"braces": {
							"patterns": [
								{
									"captures": {
										"0": {
											"name": "constant.character.escape.ultragen"
										}
									},
									"match": "\\\\\\{|\\\\\\}",
									"name": "constant.other.symbol.ultragen"
								},
								{
									"begin": "\\{",
									"captures": {
										"0": {
											"name": "constant.other.symbol.ultragen"
										}
									},
									"end": "\\}",
									"patterns": [
										{
											"include": "#braces"
										},
										{
											"include": "#symbol"
										}
									]
								}
							]
						},
						"brackets": {
							"patterns": [
								{
									"captures": {
										"0": {
											"name": "constant.character.escape.ultragen"
										}
									},
									"match": "\\\\\\[|\\\\\\]",
									"name": "constant.other.symbol.ultragen"
								},
								{
									"begin": "\\[",
									"captures": {
										"0": {
											"name": "constant.other.symbol.ultragen"
										}
									},
									"end": "\\]",
									"patterns": [
										{
											"include": "#brackets"
										},
										{
											"include": "#symbol"
										}
									]
								}
							]
						},
						"parens": {
							"patterns": [
								{
									"captures": {
										"0": {
											"name": "constant.character.escape.ultragen"
										}
									},
									"match": "\\\\\\(|\\\\\\)",
									"name": "constant.other.symbol.ultragen"
								},
								{
									"begin": "\\(",
									"captures": {
										"0": {
											"name": "constant.other.symbol.ultragen"
										}
									},
									"end": "\\)",
									"patterns": [
										{
											"include": "#parens"
										},
										{
											"include": "#symbol"
										}
									]
								}
							]
						},
						"symbol": {
							"patterns": [
								{
									"captures": {
										"0": {
											"name": "constant.character.escape.ultragen"
										}
									},
									"match": "\\\\\\\\|\\\\[ ]",
									"name": "constant.other.symbol.ultragen"
								},
								{
									"match": "\\S\\w*",
									"name": "constant.other.symbol.ultragen"
								}
							]
						}
					}
				},
				{
					"begin": "%I(?:([(\\[{<])|([^\\w\\s]|_))",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.array.begin.ultragen"
						}
					},
					"end": "[)\\]}>]\\2|\\1\\2",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.array.end.ultragen"
						}
					},
					"name": "meta.array.symbol.interpolated.ultragen",
					"patterns": [
						{
							"begin": "\\G(?<=\\()(?!\\))",
							"end": "(?=\\))",
							"patterns": [
								{
									"include": "#parens"
								},
								{
									"include": "#symbol"
								}
							]
						},
						{
							"begin": "\\G(?<=\\[)(?!\\])",
							"end": "(?=\\])",
							"patterns": [
								{
									"include": "#brackets"
								},
								{
									"include": "#symbol"
								}
							]
						},
						{
							"begin": "\\G(?<=\\{)(?!\\})",
							"end": "(?=\\})",
							"patterns": [
								{
									"include": "#braces"
								},
								{
									"include": "#symbol"
								}
							]
						},
						{
							"begin": "\\G(?<=<)(?!>)",
							"end": "(?=>)",
							"patterns": [
								{
									"include": "#angles"
								},
								{
									"include": "#symbol"
								}
							]
						},
						{
							"include": "#symbol"
						}
					],
					"repository": {
						"angles": {
							"patterns": [
								{
									"begin": "<",
									"captures": {
										"0": {
											"name": "constant.other.symbol.ultragen"
										}
									},
									"end": ">",
									"patterns": [
										{
											"include": "#angles"
										},
										{
											"include": "#symbol"
										}
									]
								}
							]
						},
						"braces": {
							"patterns": [
								{
									"begin": "\\{",
									"captures": {
										"0": {
											"name": "constant.other.symbol.ultragen"
										}
									},
									"end": "\\}",
									"patterns": [
										{
											"include": "#braces"
										},
										{
											"include": "#symbol"
										}
									]
								}
							]
						},
						"brackets": {
							"patterns": [
								{
									"begin": "\\[",
									"captures": {
										"0": {
											"name": "constant.other.symbol.ultragen"
										}
									},
									"end": "\\]",
									"patterns": [
										{
											"include": "#brackets"
										},
										{
											"include": "#symbol"
										}
									]
								}
							]
						},
						"parens": {
							"patterns": [
								{
									"begin": "\\(",
									"captures": {
										"0": {
											"name": "constant.other.symbol.ultragen"
										}
									},
									"end": "\\)",
									"patterns": [
										{
											"include": "#parens"
										},
										{
											"include": "#symbol"
										}
									]
								}
							]
						},
						"symbol": {
							"patterns": [
								{
									"begin": "(?=\\\\|#\\{)",
									"end": "(?!\\G)",
									"name": "constant.other.symbol.ultragen",
									"patterns": [
										{
											"include": "#escaped_char"
										},
										{
											"include": "#interpolated_ultragen"
										}
									]
								},
								{
									"match": "\\S\\w*",
									"name": "constant.other.symbol.ultragen"
								}
							]
						}
					}
				},
				{
					"begin": "%q(?:([(\\[{<])|([^\\w\\s]|_))",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.ultragen"
						}
					},
					"end": "[)\\]}>]\\2|\\1\\2",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.ultragen"
						}
					},
					"name": "string.quoted.other.ultragen",
					"patterns": [
						{
							"begin": "\\G(?<=\\()(?!\\))",
							"end": "(?=\\))",
							"patterns": [
								{
									"include": "#parens"
								}
							]
						},
						{
							"begin": "\\G(?<=\\[)(?!\\])",
							"end": "(?=\\])",
							"patterns": [
								{
									"include": "#brackets"
								}
							]
						},
						{
							"begin": "\\G(?<=\\{)(?!\\})",
							"end": "(?=\\})",
							"patterns": [
								{
									"include": "#braces"
								}
							]
						},
						{
							"begin": "\\G(?<=<)(?!>)",
							"end": "(?=>)",
							"patterns": [
								{
									"include": "#angles"
								}
							]
						}
					],
					"repository": {
						"angles": {
							"patterns": [
								{
									"match": "\\\\<|\\\\>|\\\\\\\\",
									"name": "constant.character.escape.ultragen"
								},
								{
									"begin": "<",
									"end": ">",
									"patterns": [
										{
											"include": "#angles"
										}
									]
								}
							]
						},
						"braces": {
							"patterns": [
								{
									"match": "\\\\\\{|\\\\\\}|\\\\\\\\",
									"name": "constant.character.escape.ultragen"
								},
								{
									"begin": "\\{",
									"end": "\\}",
									"patterns": [
										{
											"include": "#braces"
										}
									]
								}
							]
						},
						"brackets": {
							"patterns": [
								{
									"match": "\\\\\\[|\\\\\\]|\\\\\\\\",
									"name": "constant.character.escape.ultragen"
								},
								{
									"begin": "\\[",
									"end": "\\]",
									"patterns": [
										{
											"include": "#brackets"
										}
									]
								}
							]
						},
						"parens": {
							"patterns": [
								{
									"match": "\\\\\\(|\\\\\\)|\\\\\\\\",
									"name": "constant.character.escape.ultragen"
								},
								{
									"begin": "\\(",
									"end": "\\)",
									"patterns": [
										{
											"include": "#parens"
										}
									]
								}
							]
						}
					}
				},
				{
					"begin": "%Q?(?:([(\\[{<])|([^\\w\\s=]|_))",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.ultragen"
						}
					},
					"end": "[)\\]}>]\\2|\\1\\2",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.ultragen"
						}
					},
					"name": "string.quoted.other.interpolated.ultragen",
					"patterns": [
						{
							"begin": "\\G(?<=\\()(?!\\))",
							"end": "(?=\\))",
							"patterns": [
								{
									"include": "#parens"
								}
							]
						},
						{
							"begin": "\\G(?<=\\[)(?!\\])",
							"end": "(?=\\])",
							"patterns": [
								{
									"include": "#brackets"
								}
							]
						},
						{
							"begin": "\\G(?<=\\{)(?!\\})",
							"end": "(?=\\})",
							"patterns": [
								{
									"include": "#braces"
								}
							]
						},
						{
							"begin": "\\G(?<=<)(?!>)",
							"end": "(?=>)",
							"patterns": [
								{
									"include": "#angles"
								}
							]
						},
						{
							"include": "#escaped_char"
						},
						{
							"include": "#interpolated_ultragen"
						}
					],
					"repository": {
						"angles": {
							"patterns": [
								{
									"include": "#escaped_char"
								},
								{
									"include": "#interpolated_ultragen"
								},
								{
									"begin": "<",
									"end": ">",
									"patterns": [
										{
											"include": "#angles"
										}
									]
								}
							]
						},
						"braces": {
							"patterns": [
								{
									"include": "#escaped_char"
								},
								{
									"include": "#interpolated_ultragen"
								},
								{
									"begin": "\\{",
									"end": "\\}",
									"patterns": [
										{
											"include": "#braces"
										}
									]
								}
							]
						},
						"brackets": {
							"patterns": [
								{
									"include": "#escaped_char"
								},
								{
									"include": "#interpolated_ultragen"
								},
								{
									"begin": "\\[",
									"end": "\\]",
									"patterns": [
										{
											"include": "#brackets"
										}
									]
								}
							]
						},
						"parens": {
							"patterns": [
								{
									"include": "#escaped_char"
								},
								{
									"include": "#interpolated_ultragen"
								},
								{
									"begin": "\\(",
									"end": "\\)",
									"patterns": [
										{
											"include": "#parens"
										}
									]
								}
							]
						}
					}
				},
				{
					"begin": "%r(?:([(\\[{<])|([^\\w\\s]|_))",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.ultragen"
						}
					},
					"end": "([)\\]}>]\\2|\\1\\2)[eimnosux]*",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.ultragen"
						}
					},
					"name": "string.regexp.percent.ultragen",
					"patterns": [
						{
							"begin": "\\G(?<=\\()(?!\\))",
							"end": "(?=\\))",
							"patterns": [
								{
									"include": "#parens"
								}
							]
						},
						{
							"begin": "\\G(?<=\\[)(?!\\])",
							"end": "(?=\\])",
							"patterns": [
								{
									"include": "#brackets"
								}
							]
						},
						{
							"begin": "\\G(?<=\\{)(?!\\})",
							"end": "(?=\\})",
							"patterns": [
								{
									"include": "#braces"
								}
							]
						},
						{
							"begin": "\\G(?<=<)(?!>)",
							"end": "(?=>)",
							"patterns": [
								{
									"include": "#angles"
								}
							]
						},
						{
							"include": "#regex_sub"
						}
					],
					"repository": {
						"angles": {
							"patterns": [
								{
									"include": "#regex_sub"
								},
								{
									"begin": "<",
									"end": ">",
									"patterns": [
										{
											"include": "#angles"
										}
									]
								}
							]
						},
						"braces": {
							"patterns": [
								{
									"include": "#regex_sub"
								},
								{
									"begin": "\\{",
									"end": "\\}",
									"patterns": [
										{
											"include": "#braces"
										}
									]
								}
							]
						},
						"brackets": {
							"patterns": [
								{
									"include": "#regex_sub"
								},
								{
									"begin": "\\[",
									"end": "\\]",
									"patterns": [
										{
											"include": "#brackets"
										}
									]
								}
							]
						},
						"parens": {
							"patterns": [
								{
									"include": "#regex_sub"
								},
								{
									"begin": "\\(",
									"end": "\\)",
									"patterns": [
										{
											"include": "#parens"
										}
									]
								}
							]
						}
					}
				},
				{
					"begin": "%s(?:([(\\[{<])|([^\\w\\s]|_))",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.constant.begin.ultragen"
						}
					},
					"end": "[)\\]}>]\\2|\\1\\2",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.constant.end.ultragen"
						}
					},
					"name": "constant.other.symbol.percent.ultragen",
					"patterns": [
						{
							"begin": "\\G(?<=\\()(?!\\))",
							"end": "(?=\\))",
							"patterns": [
								{
									"include": "#parens"
								}
							]
						},
						{
							"begin": "\\G(?<=\\[)(?!\\])",
							"end": "(?=\\])",
							"patterns": [
								{
									"include": "#brackets"
								}
							]
						},
						{
							"begin": "\\G(?<=\\{)(?!\\})",
							"end": "(?=\\})",
							"patterns": [
								{
									"include": "#braces"
								}
							]
						},
						{
							"begin": "\\G(?<=<)(?!>)",
							"end": "(?=>)",
							"patterns": [
								{
									"include": "#angles"
								}
							]
						}
					],
					"repository": {
						"angles": {
							"patterns": [
								{
									"match": "\\\\<|\\\\>|\\\\\\\\",
									"name": "constant.character.escape.ultragen"
								},
								{
									"begin": "<",
									"end": ">",
									"patterns": [
										{
											"include": "#angles"
										}
									]
								}
							]
						},
						"braces": {
							"patterns": [
								{
									"match": "\\\\\\{|\\\\\\}|\\\\\\\\",
									"name": "constant.character.escape.ultragen"
								},
								{
									"begin": "\\{",
									"end": "\\}",
									"patterns": [
										{
											"include": "#braces"
										}
									]
								}
							]
						},
						"brackets": {
							"patterns": [
								{
									"match": "\\\\\\[|\\\\\\]|\\\\\\\\",
									"name": "constant.character.escape.ultragen"
								},
								{
									"begin": "\\[",
									"end": "\\]",
									"patterns": [
										{
											"include": "#brackets"
										}
									]
								}
							]
						},
						"parens": {
							"patterns": [
								{
									"match": "\\\\\\(|\\\\\\)|\\\\\\\\",
									"name": "constant.character.escape.ultragen"
								},
								{
									"begin": "\\(",
									"end": "\\)",
									"patterns": [
										{
											"include": "#parens"
										}
									]
								}
							]
						}
					}
				},
				{
					"begin": "%w(?:([(\\[{<])|([^\\w\\s]|_))",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.array.begin.ultragen"
						}
					},
					"end": "[)\\]}>]\\2|\\1\\2",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.array.end.ultragen"
						}
					},
					"name": "meta.array.string.ultragen",
					"patterns": [
						{
							"begin": "\\G(?<=\\()(?!\\))",
							"end": "(?=\\))",
							"patterns": [
								{
									"include": "#parens"
								},
								{
									"include": "#string"
								}
							]
						},
						{
							"begin": "\\G(?<=\\[)(?!\\])",
							"end": "(?=\\])",
							"patterns": [
								{
									"include": "#brackets"
								},
								{
									"include": "#string"
								}
							]
						},
						{
							"begin": "\\G(?<=\\{)(?!\\})",
							"end": "(?=\\})",
							"patterns": [
								{
									"include": "#braces"
								},
								{
									"include": "#string"
								}
							]
						},
						{
							"begin": "\\G(?<=<)(?!>)",
							"end": "(?=>)",
							"patterns": [
								{
									"include": "#angles"
								},
								{
									"include": "#string"
								}
							]
						},
						{
							"include": "#string"
						}
					],
					"repository": {
						"angles": {
							"patterns": [
								{
									"captures": {
										"0": {
											"name": "constant.character.escape.ultragen"
										}
									},
									"match": "\\\\<|\\\\>",
									"name": "string.other.ultragen"
								},
								{
									"begin": "<",
									"captures": {
										"0": {
											"name": "string.other.ultragen"
										}
									},
									"end": ">",
									"patterns": [
										{
											"include": "#angles"
										},
										{
											"include": "#string"
										}
									]
								}
							]
						},
						"braces": {
							"patterns": [
								{
									"captures": {
										"0": {
											"name": "constant.character.escape.ultragen"
										}
									},
									"match": "\\\\\\{|\\\\\\}",
									"name": "string.other.ultragen"
								},
								{
									"begin": "\\{",
									"captures": {
										"0": {
											"name": "string.other.ultragen"
										}
									},
									"end": "\\}",
									"patterns": [
										{
											"include": "#braces"
										},
										{
											"include": "#string"
										}
									]
								}
							]
						},
						"brackets": {
							"patterns": [
								{
									"captures": {
										"0": {
											"name": "constant.character.escape.ultragen"
										}
									},
									"match": "\\\\\\[|\\\\\\]",
									"name": "string.other.ultragen"
								},
								{
									"begin": "\\[",
									"captures": {
										"0": {
											"name": "string.other.ultragen"
										}
									},
									"end": "\\]",
									"patterns": [
										{
											"include": "#brackets"
										},
										{
											"include": "#string"
										}
									]
								}
							]
						},
						"parens": {
							"patterns": [
								{
									"captures": {
										"0": {
											"name": "constant.character.escape.ultragen"
										}
									},
									"match": "\\\\\\(|\\\\\\)",
									"name": "string.other.ultragen"
								},
								{
									"begin": "\\(",
									"captures": {
										"0": {
											"name": "string.other.ultragen"
										}
									},
									"end": "\\)",
									"patterns": [
										{
											"include": "#parens"
										},
										{
											"include": "#string"
										}
									]
								}
							]
						},
						"string": {
							"patterns": [
								{
									"captures": {
										"0": {
											"name": "constant.character.escape.ultragen"
										}
									},
									"match": "\\\\\\\\|\\\\[ ]",
									"name": "string.other.ultragen"
								},
								{
									"match": "\\S\\w*",
									"name": "string.other.ultragen"
								}
							]
						}
					}
				},
				{
					"begin": "%W(?:([(\\[{<])|([^\\w\\s]|_))",
					"beginCaptures": {
						"0": {
							"name": "punctuation.section.array.begin.ultragen"
						}
					},
					"end": "[)\\]}>]\\2|\\1\\2",
					"endCaptures": {
						"0": {
							"name": "punctuation.section.array.end.ultragen"
						}
					},
					"name": "meta.array.string.interpolated.ultragen",
					"patterns": [
						{
							"begin": "\\G(?<=\\()(?!\\))",
							"end": "(?=\\))",
							"patterns": [
								{
									"include": "#parens"
								},
								{
									"include": "#string"
								}
							]
						},
						{
							"begin": "\\G(?<=\\[)(?!\\])",
							"end": "(?=\\])",
							"patterns": [
								{
									"include": "#brackets"
								},
								{
									"include": "#string"
								}
							]
						},
						{
							"begin": "\\G(?<=\\{)(?!\\})",
							"end": "(?=\\})",
							"patterns": [
								{
									"include": "#braces"
								},
								{
									"include": "#string"
								}
							]
						},
						{
							"begin": "\\G(?<=<)(?!>)",
							"end": "(?=>)",
							"patterns": [
								{
									"include": "#angles"
								},
								{
									"include": "#string"
								}
							]
						},
						{
							"include": "#string"
						}
					],
					"repository": {
						"angles": {
							"patterns": [
								{
									"begin": "<",
									"captures": {
										"0": {
											"name": "string.other.ultragen"
										}
									},
									"end": ">",
									"patterns": [
										{
											"include": "#angles"
										},
										{
											"include": "#string"
										}
									]
								}
							]
						},
						"braces": {
							"patterns": [
								{
									"begin": "\\{",
									"captures": {
										"0": {
											"name": "string.other.ultragen"
										}
									},
									"end": "\\}",
									"patterns": [
										{
											"include": "#braces"
										},
										{
											"include": "#string"
										}
									]
								}
							]
						},
						"brackets": {
							"patterns": [
								{
									"begin": "\\[",
									"captures": {
										"0": {
											"name": "string.other.ultragen"
										}
									},
									"end": "\\]",
									"patterns": [
										{
											"include": "#brackets"
										},
										{
											"include": "#string"
										}
									]
								}
							]
						},
						"parens": {
							"patterns": [
								{
									"begin": "\\(",
									"captures": {
										"0": {
											"name": "string.other.ultragen"
										}
									},
									"end": "\\)",
									"patterns": [
										{
											"include": "#parens"
										},
										{
											"include": "#string"
										}
									]
								}
							]
						},
						"string": {
							"patterns": [
								{
									"begin": "(?=\\\\|#\\{)",
									"end": "(?!\\G)",
									"name": "string.other.ultragen",
									"patterns": [
										{
											"include": "#escaped_char"
										},
										{
											"include": "#interpolated_ultragen"
										}
									]
								},
								{
									"match": "\\S\\w*",
									"name": "string.other.ultragen"
								}
							]
						}
					}
				},
				{
					"begin": "%x(?:([(\\[{<])|([^\\w\\s]|_))",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.ultragen"
						}
					},
					"end": "[)\\]}>]\\2|\\1\\2",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.ultragen"
						}
					},
					"name": "string.interpolated.percent.ultragen",
					"patterns": [
						{
							"begin": "\\G(?<=\\()(?!\\))",
							"end": "(?=\\))",
							"patterns": [
								{
									"include": "#parens"
								}
							]
						},
						{
							"begin": "\\G(?<=\\[)(?!\\])",
							"end": "(?=\\])",
							"patterns": [
								{
									"include": "#brackets"
								}
							]
						},
						{
							"begin": "\\G(?<=\\{)(?!\\})",
							"end": "(?=\\})",
							"patterns": [
								{
									"include": "#braces"
								}
							]
						},
						{
							"begin": "\\G(?<=<)(?!>)",
							"end": "(?=>)",
							"patterns": [
								{
									"include": "#angles"
								}
							]
						},
						{
							"include": "#escaped_char"
						},
						{
							"include": "#interpolated_ultragen"
						}
					],
					"repository": {
						"angles": {
							"patterns": [
								{
									"include": "#escaped_char"
								},
								{
									"include": "#interpolated_ultragen"
								},
								{
									"begin": "<",
									"end": ">",
									"patterns": [
										{
											"include": "#angles"
										}
									]
								}
							]
						},
						"braces": {
							"patterns": [
								{
									"include": "#escaped_char"
								},
								{
									"include": "#interpolated_ultragen"
								},
								{
									"begin": "\\{",
									"end": "\\}",
									"patterns": [
										{
											"include": "#braces"
										}
									]
								}
							]
						},
						"brackets": {
							"patterns": [
								{
									"include": "#escaped_char"
								},
								{
									"include": "#interpolated_ultragen"
								},
								{
									"begin": "\\[",
									"end": "\\]",
									"patterns": [
										{
											"include": "#brackets"
										}
									]
								}
							]
						},
						"parens": {
							"patterns": [
								{
									"include": "#escaped_char"
								},
								{
									"include": "#interpolated_ultragen"
								},
								{
									"begin": "\\(",
									"end": "\\)",
									"patterns": [
										{
											"include": "#parens"
										}
									]
								}
							]
						}
					}
				}
			]
		},
		"regex_sub": {
			"patterns": [
				{
					"include": "#interpolated_ultragen"
				},
				{
					"include": "#escaped_char"
				},
				{
					"captures": {
						"1": {
							"name": "punctuation.definition.quantifier.begin.ultragen"
						},
						"3": {
							"name": "punctuation.definition.quantifier.end.ultragen"
						}
					},
					"match": "(\\{)\\d+(,\\d+)?(\\})",
					"name": "keyword.operator.quantifier.ultragen"
				},
				{
					"begin": "\\[\\^?",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.character-class.begin.ultragen"
						}
					},
					"end": "\\]",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.character-class.end.ultragen"
						}
					},
					"name": "constant.other.character-class.set.ultragen",
					"patterns": [
						{
							"include": "#escaped_char"
						}
					]
				},
				{
					"begin": "\\(\\?#",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.begin.ultragen"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.comment.end.ultragen"
						}
					},
					"name": "comment.line.number-sign.ultragen",
					"patterns": [
						{
							"include": "#escaped_char"
						}
					]
				},
				{
					"begin": "\\(",
					"captures": {
						"0": {
							"name": "punctuation.definition.group.ultragen"
						}
					},
					"end": "\\)",
					"name": "meta.group.regexp.ultragen",
					"patterns": [
						{
							"include": "#regex_sub"
						}
					]
				},
				{
					"begin": "(?<=^|\\s)(#)\\s(?=[[a-zA-Z0-9,. \\t?!-][^\\x{00}-\\x{7F}]]*$)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.comment.ultragen"
						}
					},
					"comment": "We are restrictive in what we allow to go after the comment character to avoid false positives, since the availability of comments depend on regexp flags.",
					"end": "$\\n?",
					"name": "comment.line.number-sign.ultragen"
				}
			]
		}
	}
}
